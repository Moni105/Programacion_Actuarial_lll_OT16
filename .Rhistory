?rnorm
help.search("rnorm")
args(rnorm)
rnorm(100)
set.seed(1)
rnorm(10)
a <- available.packages()
head(a,3)
head(rownames(a),3)
n <-
>
n <- signif(nrow(a),2)
n
install.packages("ggplot2")
source("http://bioconductor.org/bioclite.R"
> source("http://bioconductor.org/bioclite.R")
> source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/bioclite.R")
library(ggplot2)
library(ggplot2)
require(ggplot2)
install.packages("RTools")
install.packages("devtools")
source('~/.active-rstudio-document', encoding = 'UTF-8')
poo
install.packages("RMarkDown")
install.packages("rmarkdown")
```
x <- 1
print(x)
x
msg <- "Hola"
msg
x <- ##Esto es un comentario
2
x
x <- 1:20
x
?vector
a <- vector(mode = "numeric", lenght = 5)
a <- vector(mode = "numeric", length = 5)
1.5L
class(1)
class(1L)
1/0
1/0
0/0
attributes(airquality)
#clase 25/08/16
#crear vectores
x <- vector(mode = "numeric", length = 5L)
#clase 25/08/16
#crear vectores CON la función vector
x <- vector(mode = "numeric", length = 5L)
x
#clase 25/08/16
#crear vectores CON la función vector
x <- vector(mode = "numeric", length = 5L)
x
#crear vectores con la función c
x <- c(0.5,0.6)
x
class(x)
x <- c(TRUE, FALSE)
x
class(x)
class(x)
x <- 5:10
x
class(x)
x <- 10:0
x
class(x)
x <- c(1+2i,5,3+9i,-4-5i)
x
class(x)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
x <- c(1+2i,5,3+9i,-4-5i)
x <- c(1+2i,5,3+9i,-4-5i)
x
class(x)
x <- c("a","b","c","d")
x
class(x)
x <- c("a","b","c","d",e)
x
class(x)
x <- c("a","b","c","d","e")
x
class(x)
y <- c(1.7,"a") #CARACTER
y <- c(1.7,"a") #CARACTER
y
class(Y)
y <- c(1.7,"a") #CARACTER
y
class(y)
y <- c(TRUE,2) #NUMERICO, NO TIENE L
y
y <- c("a",TRUE) #caracter
y
class(y)
z <- 0:6
class(z)
z <- 0:6
class(z)
as.numeric(z)
as.logical(z)
as.complex(z)
as.character(z)
x <- list
#LISTAS
x <- list(1, "a", T, 2+3i,)
x
x <- list(1,"a",T,2+3i,)
x <- c(1+2i,5,3+9i,-4-5i)
x <- list(1,"a",T,2+3i,)
x <- list(1,"a",T,2+3i)
x
class(x)
source('~/.active-rstudio-document', encoding = 'UTF-8')
?matrix
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
## Including Plots
---
title: "Untitled"
author: "Mónica Gaona"
date: "22 de agosto de 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
?matrix
#matrices
m <- matrix(nrow = 2, ncol = 3)
m
dim(m) #dimensión
m <- matrix(nrow = 2, ncol = 3)
m
dim(m) #dimensión
attributes(m)
dim(m) <- c(3,2)
View(m)
#cambio de dimenciones de 2x3 a 3x2
m <- matrix(1:6,3,2)
m
m <- matrix(1:6,3,2,T)
m
m <- matrix(1:6,3,3,T)
m
class(m)
str(m)
dim(m) <- c(2,5)
x <- (1,2,3)
y <- ("a","b","c")
z <- c(x,y)
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(x,y)
z
m1
m1 <- rbind(m,x)
m1
m2 <- cbind(m,x)
m2
m1 <- rbind(m,y)
m1
m2 <- cbind(m,y)
m2
rbind(m1,y)
cbind(m2,y)
mclass
cbind(m2,x)
rbind(m1,y)
rbind(m1,x)
source('~/GitHub/Programacion_Actuarial_lll_OT16/clase 22 progra.R')
source('~/GitHub/Programacion_Actuarial_lll_OT16/clase 22 progra.R')
source('~/GitHub/Programacion_Actuarial_lll_OT16/clase 22 progra.R')
Encabezado
# **Primer Nivel**
## *segundo nivel**
###tercer nivel
lista
* 1er elemto
* 2do elemento
* 3er elemento
source
title: "Calificaciones"
title: "Calificaciones"
author: "Mónica Gaona"
date: "29 de agosto de 2016"
title: "Calificaciones"
x  <- factor(c("si","no","si","si","no","si","no"))
x
table(x)
unclass(x)
?unclass
levels = c("si","no")
x
table(x)
unclass(x) #forma en que lo almacena, en números enteros (usa menos almacenamiento)
?unclass
#orden alfabetico
x <- factor(c("azul","azul","rojo","azul","amarillo","verde","azul"))
x
table(x)
x <- c(1,2,NA,10,3)
is.na(X)
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
x <- c(1,2,NaN,10,3)
is.na(x)
is.nan(x)
x <- data.frame(Erick= 1:4, Lori=c(T,T,f,f))
x
x <- data.frame(Erick= 1:4, Lori=c(T,T,F,F))
x
row.names(x) <- c("primero","segundo","tercero","cuarto")
x
x <- data.frame(Erick= 1:6, Lori=c(T,T,F,F))
x
nrow(x) #número de filas
ncol(x) #número de columnas
attributes(x)
names(x) <- c("Yarely","Karen")
x
x <- 1:3
names(x)
names(x) <- c("Hugo","paco","luis")
x
names(x)
x <- list(a=1:10,b=100:91,c=51,60)
x
x <- list(a=1:10,b=100:91,c=51:60)
x
names(x) <- c("Sec.1","Sec.2","Sec.3")
x
m <- matrix(1:4,2,2)
m
attributes(m)
dimnames(m) <- list(c("fil1","fil2"),c("col.1","col.2"))
m
m <- matrix(1:5,"a:f")
m
m <- matrix(1:5,c("a","b","c","d","e","f"))
m
m1 <- matrix(1:5,c("a","b","c","d","e","f"))
m1
m1 <- matrix(NA, 1:5, 1:6)
m1
m1 <- matrix(NA,5,6)
m1
names(m1) <- c("a","b","c","d","e","f")
m1
dimnames(m1) <- list(c(1:5),c("a","b","c","d","e","f"))
m1
dimnames(m1) <- list(c(1:5),c("a","b","c","d","e","f"))
dimnames(m1) <- list(c(1:5),c("a","b","c","d","e","f"))
m1
dimnames(m1) <- list(c(1:5),c("a","b","c","d","e","f"))
m1
getwd
gerwd()
getwd()
setwd("~/GitHub/Programacion_Actuarial_lll_OT16")
data <- read.csv("datos_S&P")
data <- read.csv("datos_S&P.csv")
data
data <- read.table("datos_S&P.csv",T,",")
data
data <- read.table("datos_S&P.csv",F,",")
data
x <- factor(c("azul","azul","rojo","azul","amarillo","verde","azul"))
x
table(x)
args(read.table)
data <- read.table("datos_S&P.csv",T,",",nrows=100, skip=2)
data
y <- data.frame(a=1,b="a") #dos culmnas, un dato
dput(y)
dput(y, file= "y.r")
nueva.y <- dget("y.R")
y
nueva.y
dump(c("x","y"), file="data.R") #tomas x y y y lo guardas en el archivo data, usamos el nombre de la variable
rm(x,y)
source("data.R")
x <- "Programación Actuarial III"
y <- data.frame(a=1,b="a")
dump(c("x","y"), file="data.R") #tomas x y y y lo guardas en el archivo data, usamos el nombre de la variable
#comillas para que no pegue programacipón sino el objeto
rm(x,y)
source("data.R")
x <- "Programación Actuarial III"
y <- data.frame(a=1,b="a")
dump(c("x","y"), file="data.R") #tomas x y y y lo guardas en el archivo data, usamos el nombre de la variable
#comillas para que no pegue programacipón sino el objeto
rm(x,y)
source("data.R")
head.(airquality)
head(airquality)
z <- head(airquality)
dput(z, file("z.R"))
Mónica,quality <- head(airquality)
dput(z, file("z.R"))
Mónica.quality <- head(airquality)
dput(z, file("Mónica.quality.R"))
con <- url("http://www.fcfm.buap.mx/","r")
x <- readLines(con,7)
x
#SUBCONJUNTOS
#creamos un vector
x <- c("a","b","c","d","e")
x
#extraemos con  []
x[1]
x[2]
#también podemos extraer una secuencia de elementos
x[1:4]
# es ppsible extraer los elementos que cumplen una restricci´pn
x[x>"b"]
#de manera equivalente se puede obtener un vector lógico
u <- x=="c"
u
x[u] #x evaluada en u
#SUBCONJUNTOS DE LISTAS
#creamos una lista
x <- list(foo = 1:4, bar = 0.6)
#extraemos el primer elemento de la lista,
#este elemento es una lista que contiene una secuencia
x[1]
#extramoes nuevamente el primer elemento de la lista
#ahora el elemento es la secuencia en sí
x[[1]]
#extraemos un elemento por nombre
x$bar
x[["bar"]]
x["bar"]
x$foo[2]
x[c(1,3)]
#creamos una lista de 3 elementos
x <- list(foo=1:4, bar=0.6,baz="Hola")
#Extraemos el primer y tercer elemento de la lista
x[c(1,3)]
x[[c(1,3)]]
x[[c(1,3)]] #saca el tercer elemento del primer objeto
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
x<- matrix(1:6,2,3)
x
x[1,2]
x[1,]
x[,2]
x[1,2, drop=FALSE]
x[1, , drop=FALSE]
x <- list(aardvark = 1:5)
x$a
x[["a"]]
x[["a", exact = FALSE]]
airquality[1:6,]
completos <- complete.cases(airquality)
completos <- complete.cases(airquality)
completos
airquality[completos,]
airquality[completos,6]
airquality[completos,][1:6]
airquality[completos,][1:6,]
airquality[1:6][completos,]
airquality[1:6,][completos,]
#operaciones vectorizadas
x <- 1:4; y <- 6:9
x + y
x > 2
x >= 2
y == 8
x * y
x / y
x <- matrix(1:4,2,2)
x
y <- matrix(rep(10,4),2,2)
y
x <- matrix(1:4,2,2,T)
X
x <- matrix(1:4,2,2,T)
x
#OPERACIONES CON MATRICES
x <- matrix(1:4,2,2)
x #byrow= false
y <- matrix(rep(10,4),2,2)
y
#x <- matrix(1:4,2,2,T)
x * y #entrada a entrada
x / y
x %*% y #multiplicación de matrices
#OPERACIONES CON MATRICES
x <- matrix(1:4,2,2)
x #byrow= false
y <- matrix(rep(10,4),2,2)
y
#x <- matrix(1:4,2,2,T)
x * y #entrada a entrada
x / y
x %*% y #multiplicación de matrices
print(1)
for(i in 1:10){print(i)}
x <- c("a","b","c","d")
for(i in 1:4){print(x[i])}
for(i in seq_along(x)){print(x[i])} #empieza en 1 hasta el número de variables que tenga
for(letra in x){print(letra)}
for(i in 1:4) print(x[i])
m <- matrix(1:6,2,3)
m
m <- matrix(1:6,2,3,T)
m
for(i in m[[x]][[3]]){print(m[i])}
m
for(i in m){print(m[i])}
for(i in ncol(m)){print(x[i])}
for(i in ncol(m)){print(x[i])}
m
for(i in ncol(m)){print(m[i])}
m
for(i in m{print(m[i])}
for(i in m){print(m[i])}
for(i in m){print(i)}
